// Cookie Manager for handling browser cookies
class CookieManager {
    constructor() {
        this.tempDir = null;
        this.cookieFile = null;
    }

    async initialize() {
        try {
            // Get platform-specific temp directory
            const response = await chrome.runtime.sendMessage({ type: 'GET_TEMP_DIR' });
            if (response.error) {
                throw new Error(response.error);
            }
            this.tempDir = response.tempDir;
            this.cookieFile = `${this.tempDir}/cookies.txt`;
        } catch (error) {
            console.error('Failed to initialize cookie manager:', error);
            throw error;
        }
    }

    async extractCookies(url) {
        try {
            if (!this.tempDir) {
                await this.initialize();
            }

            const domain = new URL(url).hostname;
            const cookies = await chrome.cookies.getAll({ domain });
            
            if (!cookies.length) {
                return null;
            }

            // Convert cookies to Netscape format
            const netscapeFormat = cookies.map(cookie => {
                const secure = cookie.secure ? 'TRUE' : 'FALSE';
                const httpOnly = cookie.httpOnly ? 'TRUE' : 'FALSE';
                const expires = cookie.expirationDate 
                    ? Math.floor(cookie.expirationDate)
                    : Math.floor(Date.now() / 1000) + 31536000; // 1 year from now
                
                return [
                    domain,
                    domain.startsWith('.') ? 'TRUE' : 'FALSE',
                    cookie.path,
                    secure,
                    expires,
                    cookie.name,
                    cookie.value
                ].join('\t');
            }).join('\n');

            // Add Netscape format header
            const cookieContent = [
                '# Netscape HTTP Cookie File',
                '# https://curl.haxx.se/rfc/cookie_spec.html',
                '# This file was generated by Instant Download Extension',
                '',
                netscapeFormat
            ].join('\n');

            // Save to file
            const blob = new Blob([cookieContent], { type: 'text/plain' });
            const fileHandle = await chrome.runtime.sendMessage({
                type: 'SAVE_COOKIES',
                content: cookieContent,
                path: this.cookieFile
            });

            if (fileHandle.error) {
                throw new Error(fileHandle.error);
            }

            return this.cookieFile;
        } catch (error) {
            console.error('Failed to extract cookies:', error);
            return null;
        }
    }

    async cleanup() {
        try {
            if (this.cookieFile) {
                await chrome.runtime.sendMessage({
                    type: 'DELETE_COOKIES',
                    path: this.cookieFile
                });
            }
        } catch (error) {
            console.error('Failed to cleanup cookies:', error);
        }
    }
}

// Export the cookie manager
export const cookieManager = new CookieManager(); 